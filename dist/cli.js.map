{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { XMLSerializer, DOMParser } from \"xmldom\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { hideBin } from \"yargs/helpers\";\r\nimport yargs, { ArgumentsCamelCase, CommandModule, Argv } from \"yargs\";\r\nimport archiver from \"archiver\";\r\nimport yaml from \"js-yaml\";\r\nimport xpath from \"xpath\";\r\n\r\ntype PackageArgs = {\r\n  folder: string;\r\n  env?: string;\r\n};\r\n\r\ntype BpmnEnvModifications = {\r\n  modifications: Modification[];\r\n};\r\n\r\ntype Modification = {\r\n  action: string;\r\n  target: string;\r\n  value?: string;\r\n};\r\n\r\ntype XMLNode =\r\n  | Element\r\n  | Attr\r\n  | Text\r\n  | CDATASection\r\n  | ProcessingInstruction\r\n  | Comment\r\n  | Document\r\n  | DocumentType\r\n  | DocumentFragment;\r\n\r\nconst nsResolver: XPathNSResolver = {\r\n  lookupNamespaceURI: (prefix: string): string | null => {\r\n    const namespaces: Record<string, string> = {\r\n      bpmn: \"http://www.omg.org/spec/BPMN/20100524/MODEL\",\r\n      bpmndi: \"http://www.omg.org/spec/BPMN/20100524/DI\",\r\n      dc: \"http://www.omg.org/spec/DD/20100524/DC\",\r\n      di: \"http://www.omg.org/spec/DD/20100524/DI\",\r\n      camunda: \"http://camunda.org/schema/1.0/bpmn\",\r\n      xsi: \"http://www.w3.org/2001/XMLSchema-instance\",\r\n      modeler: \"http://camunda.org/schema/modeler/1.0\",\r\n      sistemiv: \"http://sistemiv.com/schema/1.0\",\r\n    };\r\n    return namespaces[prefix] || null;\r\n  },\r\n};\r\n\r\nconst packageCommand: CommandModule<{}, PackageArgs> = {\r\n  command: \"svsdp package <folder>\",\r\n  describe: \"Zip the provided folder into a .svsdp package\",\r\n  builder: (yargs: Argv<{}>): Argv<PackageArgs> => {\r\n    return yargs\r\n      .positional(\"folder\", {\r\n        describe: \"Path to the folder you want to zip\",\r\n        type: \"string\",\r\n        demandOption: true,\r\n      })\r\n      .option(\"env\", {\r\n        alias: \"e\",\r\n        describe: `\\nEnvironment of the bpmn modification file: bpmn.<env>.yaml;\\nYou must hava a .bpmn file that matches the folder name: <folder>.bpmn;\\nThe bpmn.<env>.yaml file must be in format:\\nmodifications:\\n••-•action:•\"valid action\"\\n••••target:•\"valid xpath\"\\n••••value:•\"string\"\\n••-•action:...\\n\\nLEGEND:\\n\\n• -> represents space (whitespace)\\n\\nValid action is: addAttribute | addElement | addText | replace | remove\\n`,\r\n        type: \"string\",\r\n        default: undefined,\r\n      });\r\n  },\r\n  handler: (argv: ArgumentsCamelCase<PackageArgs>) => {\r\n    const inputPath = path.resolve(argv.folder);\r\n    const folderName = path.basename(inputPath);\r\n    const outputPath = path.resolve(process.cwd(), `${folderName}.svsdp`);\r\n    const env = argv.env;\r\n\r\n    if (!fs.existsSync(inputPath) || !fs.statSync(inputPath).isDirectory()) {\r\n      console.error(`❌ Folder not found: ${inputPath}`);\r\n      process.exit(1);\r\n    }\r\n\r\n    if (env) {\r\n      console.log(`🌐 Loading the environment`);\r\n      const envPath = path.join(inputPath, \"bpmn.\" + env + \".yaml\");\r\n      if (!fs.existsSync(envPath)) {\r\n        console.error(`❌ Environment file not found: ${envPath}`);\r\n        process.exit(1);\r\n      }\r\n\r\n      const envFile = fs.readFileSync(envPath, \"utf-8\");\r\n      const envData = yaml.load(envFile);\r\n\r\n      if (!validateBpmnEnvModifications(envData)) {\r\n        // ostalo je value da se proveri u zavisnosti od action\r\n        console.error(`❌ Invalid environment file: ${envPath}`);\r\n        process.exit(1);\r\n      }\r\n\r\n      const bpmnPath = path.join(inputPath, folderName + \".bpmn\");\r\n      if (!fs.existsSync(bpmnPath)) {\r\n        console.error(`❌ .bpmn file not found: ${bpmnPath}`);\r\n        process.exit(1);\r\n      }\r\n\r\n      const bpmnXml = fs.readFileSync(bpmnPath, \"utf-8\");\r\n      const doc = new DOMParser().parseFromString(bpmnXml, \"text/xml\");\r\n\r\n      envData.modifications.forEach((mod) => {\r\n        console.log(`📝 Altering the .bpmn file`);\r\n\r\n        if (mod.action === \"remove\") {\r\n          const removeResult = removeNode(doc, mod.target, nsResolver);\r\n          //TODO mozda da proverim success ali nebitno je\r\n        } else if (mod.action === \"addElement\") {\r\n          if (\r\n            !mod.value ||\r\n            mod.value.length === 0 ||\r\n            typeof mod.value !== \"string\"\r\n          ) {\r\n            console.error(\"❌ Value is required for addElement action\");\r\n            process.exit(1);\r\n          }\r\n          const addElementResult = addElement(\r\n            doc,\r\n            mod.target,\r\n            mod.value!,\r\n            nsResolver\r\n          );\r\n          if (!addElementResult.success) {\r\n            console.error(\"❌ Failed to addElement\");\r\n            process.exit(1);\r\n          }\r\n        } else if (mod.action === \"addText\") {\r\n          if (\r\n            !mod.value ||\r\n            mod.value.length === 0 ||\r\n            typeof mod.value !== \"string\"\r\n          ) {\r\n            console.error(\"❌ Value is required for addText action\");\r\n            process.exit(1);\r\n          }\r\n          const addTextResult = addText(\r\n            doc,\r\n            mod.target,\r\n            mod.value!,\r\n            nsResolver\r\n          );\r\n          if (!addTextResult.success) {\r\n            console.error(\"❌ Failed to AddText\");\r\n            process.exit(1);\r\n          }\r\n        } else if (mod.action === \"addAttribute\") {\r\n          if (\r\n            !mod.value ||\r\n            mod.value.length === 0 ||\r\n            typeof mod.value !== \"string\"\r\n          ) {\r\n            console.error(\"❌ Value is required for addAttribute action\");\r\n            process.exit(1);\r\n          }\r\n          const addAttributeResult = addAttribute(\r\n            doc,\r\n            mod.target,\r\n            mod.value!,\r\n            \"\",\r\n            nsResolver\r\n          );\r\n          if (!addAttributeResult.success) {\r\n            console.error(\"❌ Failed to addAttribute\");\r\n            process.exit(1);\r\n          }\r\n        } else if (mod.action === \"replace\") {\r\n          if (\r\n            !mod.value ||\r\n            mod.value.length === 0 ||\r\n            typeof mod.value !== \"string\"\r\n          ) {\r\n            console.error(\"❌ Value is required for replace action\");\r\n            process.exit(1);\r\n          }\r\n          const replaceResult = replaceNodeValue(\r\n            doc,\r\n            mod.target,\r\n            mod.value!,\r\n            nsResolver\r\n          );\r\n          if (!replaceResult.success) {\r\n            console.error(\"❌ Failed to replace node\");\r\n            process.exit(1);\r\n          }\r\n        }\r\n      });\r\n\r\n      const updatedXml = new XMLSerializer().serializeToString(doc);\r\n      fs.writeFileSync(bpmnPath, updatedXml, \"utf-8\");\r\n      console.log(`💾 Saved modified .bpmn file`);\r\n    }\r\n\r\n    if (fs.existsSync(outputPath)) {\r\n      fs.rmSync(outputPath);\r\n      console.log(`🗑️ Removed existing .svsdp file`);\r\n    }\r\n\r\n    console.log(`📦 Creating package .svsdp`);\r\n    try {\r\n      const output = fs.createWriteStream(outputPath);\r\n      const archive = archiver(\"zip\", { zlib: { level: 5 } });\r\n\r\n      output.on(\"close\", () => {\r\n        console.log(`✅ Done: ${outputPath}`);\r\n      });\r\n\r\n      archive.on(\"error\", (err) => {\r\n        throw err;\r\n      });\r\n\r\n      archive.pipe(output);\r\n      archive.directory(inputPath, false, (entry) => {\r\n        const relativeOutputPath = path.relative(inputPath, outputPath);\r\n        if (entry.name === relativeOutputPath) {\r\n          return false; // Exclude the output .svsdp file from being included\r\n        }\r\n        return entry;\r\n      });\r\n      archive.finalize();\r\n    } catch (err) {\r\n      console.error(`❌ Failed to create .svsdp file`);\r\n      console.error(err);\r\n      process.exit(1);\r\n    }\r\n  },\r\n};\r\n\r\nyargs(hideBin(process.argv))\r\n  .command(packageCommand)\r\n  .demandCommand()\r\n  .help()\r\n  .wrap(null)\r\n  .parse();\r\n\r\nfunction validateBpmnEnvModifications( // ovo proveri action da li je ok i target da li je ok, value proveravam kasnije\r\n  envData: any\r\n): envData is BpmnEnvModifications {\r\n  if (\r\n    typeof envData !== \"object\" ||\r\n    envData === null ||\r\n    !Array.isArray(envData.modifications)\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  for (const mod of envData.modifications) {\r\n    if (\r\n      typeof mod.action !== \"string\" ||\r\n      ![\"remove\", \"addAttribute\", \"addElement\", \"addText\", \"replace\"].includes(\r\n        mod.action\r\n      ) ||\r\n      typeof mod.target !== \"string\" ||\r\n      !isValidXPath(mod.target)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// function removeNode(doc: Document, xpathExpr: string) {\r\n//   const nodes = xpath.selectWithResolver(xpathExpr, doc, nsResolver) as Node[];\r\n//   if (nodes.length === 0) {\r\n//     console.error(`❌ Node not found: ${xpathExpr}`);\r\n//     process.exit(1);\r\n//   }\r\n//   if (nodes.length > 1) {\r\n//     console.info(`⚠️ Multiple nodes will be removed`);\r\n//   }\r\n//   for (const node of nodes) {\r\n//     if (node && node.parentNode) {\r\n//       node.parentNode.removeChild(node);\r\n//     }\r\n//   }\r\n// }\r\n\r\nfunction replaceNodeValue(\r\n  doc: Document,\r\n  xpathExpr: string,\r\n  newValue: string,\r\n  nsResolver: XPathNSResolver\r\n): { success: boolean; modifiedCount: number } {\r\n  const nodes = xpath.selectWithResolver(xpathExpr, doc, nsResolver) as Node[];\r\n\r\n  if (nodes.length === 0) {\r\n    console.error(`❌ Node not found: ${xpathExpr}`);\r\n    return { success: false, modifiedCount: 0 };\r\n  }\r\n\r\n  let modifiedCount = 0;\r\n\r\n  for (const node of nodes) {\r\n    try {\r\n      const parent = node.parentNode;\r\n      if (!parent && node.nodeType !== 2) {\r\n        console.warn(`⚠️ Node has no parent, cannot replace`);\r\n        continue;\r\n      }\r\n\r\n      switch (node.nodeType) {\r\n        case 1: // Element Node\r\n          const parsed = new DOMParser().parseFromString(\r\n            `<wrapper>${newValue}</wrapper>`,\r\n            \"text/xml\"\r\n          );\r\n          const newNodes = Array.from(parsed.documentElement.childNodes);\r\n\r\n          if (newNodes.length === 0) {\r\n            throw new Error(\"No valid content provided\");\r\n          }\r\n\r\n          // Handle multiple children in the parent\r\n          if (parent!.childNodes.length > 1) {\r\n            // Replace just the target node while preserving siblings\r\n            parent!.replaceChild(\r\n              newNodes.length === 1\r\n                ? newNodes[0]\r\n                : doc.createDocumentFragment(),\r\n              node\r\n            );\r\n\r\n            // If multiple nodes were provided, insert them all\r\n            if (newNodes.length > 1) {\r\n              const fragment = doc.createDocumentFragment();\r\n              newNodes.forEach((n) => fragment.appendChild(n.cloneNode(true)));\r\n              parent!.insertBefore(fragment, node.nextSibling);\r\n            }\r\n          } else {\r\n            // Simple replacement for single-child parents\r\n            parent!.replaceChild(\r\n              newNodes.length === 1\r\n                ? newNodes[0]\r\n                : doc.createDocumentFragment(),\r\n              node\r\n            );\r\n          }\r\n          modifiedCount++;\r\n          break;\r\n\r\n        case 2: // Attribute Node\r\n          (node as Attr).value = newValue;\r\n          modifiedCount++;\r\n          break;\r\n\r\n        case 3: // Text Node\r\n          // For text nodes in elements with multiple children\r\n          if (parent!.childNodes.length > 1) {\r\n            const newText = doc.createTextNode(newValue);\r\n            parent!.replaceChild(newText, node);\r\n          } else {\r\n            (node as Text).data = newValue;\r\n          }\r\n          modifiedCount++;\r\n          break;\r\n\r\n        default:\r\n          console.warn(`⚠️ Unsupported node type: ${node.nodeType}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        `❌ Failed to replace node:`,\r\n        error instanceof Error ? error.message : error\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    success: modifiedCount === nodes.length,\r\n    modifiedCount,\r\n  };\r\n}\r\n\r\nfunction isValidXPath(xpathExpression: string): boolean {\r\n  try {\r\n    const dummyDoc = new DOMParser().parseFromString(\"<root/>\", \"text/xml\");\r\n    xpath.selectWithResolver(xpathExpression, dummyDoc, nsResolver);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction isXmlValid(xmlString: string, nsResolver?: XPathNSResolver): boolean {\r\n  try {\r\n    const doc = new DOMParser().parseFromString(xmlString, \"text/xml\");\r\n\r\n    // Check for parser errors\r\n    if (doc.getElementsByTagName(\"parsererror\").length > 0) {\r\n      return false;\r\n    }\r\n\r\n    // Test namespace resolution if resolver provided\r\n    if (nsResolver) {\r\n      xpath.selectWithResolver(\"//*\", doc, nsResolver);\r\n    }\r\n\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction ensureElementNodes(nodes: Node[], xpathExpr: string): Element[] {\r\n  const elements = nodes.filter((n) => n.nodeType === 1) as Element[];\r\n  if (elements.length !== nodes.length) {\r\n    const invalidTypes = [\r\n      ...new Set(nodes.filter((n) => n.nodeType !== 1).map((n) => n.nodeType)),\r\n    ];\r\n    console.warn(\r\n      `⚠️ XPath \"${xpathExpr}\" matched non-element nodes (types ${invalidTypes.join(\r\n        \", \"\r\n      )}). Only element nodes will be modified.`\r\n    );\r\n  }\r\n  return elements;\r\n}\r\n\r\nexport function addElement(\r\n  doc: Document,\r\n  xpathExpr: string,\r\n  elementXml: string,\r\n  nsResolver: XPathNSResolver\r\n): { success: boolean; addedCount: number } {\r\n  const nodes = xpath.selectWithResolver(xpathExpr, doc, nsResolver) as Node[];\r\n  const parents = ensureElementNodes(nodes, xpathExpr);\r\n\r\n  if (parents.length === 0) {\r\n    console.error(`❌ No valid parent elements found for: ${xpathExpr}`);\r\n    return { success: false, addedCount: 0 };\r\n  }\r\n  // Validate and parse new element\r\n  const wrapper = new DOMParser().parseFromString(\r\n    `<wrapper xmlns:ns=\"http://example.com\">${elementXml}</wrapper>`,\r\n    \"text/xml\"\r\n  );\r\n\r\n  const newNodes = Array.from(wrapper.documentElement.childNodes);\r\n  if (newNodes.length === 0 || !newNodes.every((n) => n.nodeType === 1)) {\r\n    console.error(\r\n      `❌ Invalid element XML: Must contain at least one element node`\r\n    );\r\n    return { success: false, addedCount: 0 };\r\n  }\r\n\r\n  let addedCount = 0;\r\n  for (const parent of parents) {\r\n    try {\r\n      // Convert self-closing elements if needed\r\n      if (/\\/>$/.test(parent.toString())) {\r\n        parent.appendChild(doc.createTextNode(\"\"));\r\n      }\r\n\r\n      newNodes.forEach((node) => {\r\n        const imported = doc.importNode(node, true);\r\n        parent.appendChild(imported);\r\n        addedCount++;\r\n      });\r\n    } catch (error) {\r\n      console.error(`❌ Failed to add to node:`, error);\r\n    }\r\n  }\r\n\r\n  return {\r\n    success: addedCount === newNodes.length * parents.length,\r\n    addedCount,\r\n  };\r\n  // Rest of the addElement implementation remains the same...\r\n}\r\n\r\nexport function addAttribute(\r\n  doc: Document,\r\n  xpathExpr: string,\r\n  name: string,\r\n  value: string,\r\n  nsResolver: XPathNSResolver\r\n): { success: boolean; addedCount: number } {\r\n  const nodes = xpath.selectWithResolver(xpathExpr, doc, nsResolver) as Node[];\r\n  const elements = ensureElementNodes(nodes, xpathExpr);\r\n\r\n  if (elements.length === 0) {\r\n    console.error(`❌ No valid elements found for: ${xpathExpr}`);\r\n    return { success: false, addedCount: 0 };\r\n  }\r\n\r\n  let addedCount = 0;\r\n  for (const element of elements) {\r\n    try {\r\n      if (element.hasAttribute(name)) {\r\n        console.warn(`⚠️ Attribute ${name} already exists, skipping`);\r\n        continue;\r\n      }\r\n      element.setAttribute(name, value);\r\n      addedCount++;\r\n    } catch (error) {\r\n      console.error(`❌ Failed to add attribute to element:`, error);\r\n    }\r\n  }\r\n\r\n  return { success: addedCount === elements.length, addedCount };\r\n}\r\n\r\nexport function addText(\r\n  doc: Document,\r\n  xpathExpr: string,\r\n  text: string,\r\n  nsResolver: XPathNSResolver\r\n): { success: boolean; addedCount: number } {\r\n  // Text can be added to either elements or text nodes\r\n  const nodes = xpath.selectWithResolver(xpathExpr, doc, nsResolver) as (\r\n    | Element\r\n    | Text\r\n  )[];\r\n\r\n  if (nodes.length === 0) {\r\n    console.error(`❌ No nodes found for: ${xpathExpr}`);\r\n    return { success: false, addedCount: 0 };\r\n  }\r\n\r\n  // Explicit type checking for each node\r\n  let addedCount = 0;\r\n  for (const node of nodes) {\r\n    if (node.nodeType === 1) {\r\n      // Element\r\n      const element = node as Element;\r\n      if (/\\/>$/.test(element.toString())) {\r\n        element.appendChild(doc.createTextNode(\"\"));\r\n      }\r\n      element.appendChild(doc.createTextNode(text));\r\n      addedCount++;\r\n    } else if (node.nodeType === 3) {\r\n      // Text\r\n      (node as Text).data += text;\r\n      addedCount++;\r\n    } else {\r\n      console.warn(`⚠️ Cannot add text to node type ${node.nodeType}`);\r\n    }\r\n  }\r\n\r\n  return { success: addedCount === nodes.length, addedCount };\r\n}\r\n\r\n// trenutna pitanja, da li ce uspeti da se istestira da li je proslednjeni xml element validan ako se\r\n// koristi ::bpmn i slicne namespace\r\n\r\n// remove mora da se promeni\r\n\r\n// mora za svaki replace da se odredi koja vrednost menja sta, jasno je da 3 tipa noda mogu da se promene ali moraju da\r\n// se definisu svi slucajevi sa kojim se mogu promeniti\r\n\r\n// mora add da se definise 3 komande addElement, addAttribute, addText, mora da se odredi u sta moze da se doda i koje\r\n// sve vrednosti za svaki od njih u svaki od njih mogu da se adduju\r\n\r\n// mora da se vidi sta se desi ako se nesto posalje pogresno i za target i za value za svaki action\r\n\r\n// zamena atributa osnovni slucaj koriscenja - samo webhook da se zameni\r\n\r\ninterface RemovalResult {\r\n  success: boolean;\r\n  removedCount: number;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Removes nodes matching the XPath expression\r\n * @param doc XML document\r\n * @param xpathExpr XPath expression to identify nodes to remove\r\n * @param nsResolver Namespace resolver\r\n * @returns Removal result with count of removed nodes\r\n */\r\nfunction removeNode(\r\n  doc: Document,\r\n  xpathExpr: string,\r\n  nsResolver: XPathNSResolver\r\n): RemovalResult {\r\n  try {\r\n    const nodes = xpath.selectWithResolver(\r\n      xpathExpr,\r\n      doc,\r\n      nsResolver\r\n    ) as Node[];\r\n\r\n    if (nodes.length === 0) {\r\n      const message = `❌ No nodes found matching XPath: ${xpathExpr}`;\r\n      return { success: false, removedCount: 0, error: message };\r\n    }\r\n\r\n    if (nodes.length > 1) {\r\n      console.log(`ℹ️ Found ${nodes.length} nodes to remove`);\r\n    }\r\n\r\n    let removedCount = 0;\r\n    const skippedNodes: { type: number; reason?: string }[] = [];\r\n\r\n    for (const node of nodes) {\r\n      try {\r\n        if (!node.parentNode) {\r\n          skippedNodes.push({\r\n            type: node.nodeType,\r\n            reason: \"No parent node\",\r\n          });\r\n          continue;\r\n        }\r\n\r\n        // Handle different node types appropriately\r\n        switch (node.nodeType) {\r\n          case 1: // Element\r\n          case 3: // Text\r\n          case 4: // CDATASection\r\n          case 7: // ProcessingInstruction\r\n          case 8: // Comment\r\n            node.parentNode.removeChild(node);\r\n            removedCount++;\r\n            break;\r\n\r\n          case 2: // Attribute\r\n            const attr = node as Attr;\r\n            if (attr.ownerElement) {\r\n              attr.ownerElement.removeAttribute(attr.name);\r\n              removedCount++;\r\n            } else {\r\n              skippedNodes.push({\r\n                type: node.nodeType,\r\n                reason: \"Orphaned attribute - no owner element\",\r\n              });\r\n            }\r\n            break;\r\n\r\n          case 9: // Document\r\n          case 10: // DocumentType\r\n          case 11: // DocumentFragment\r\n            skippedNodes.push({\r\n              type: node.nodeType,\r\n              reason: \"Cannot remove document-level nodes\",\r\n            });\r\n            break;\r\n\r\n          default:\r\n            skippedNodes.push({\r\n              type: node.nodeType,\r\n              reason: \"Unsupported node type for removal\",\r\n            });\r\n        }\r\n      } catch (error) {\r\n        console.error(`⚠️ Failed to remove node type ${node.nodeType}:`, error);\r\n        skippedNodes.push({\r\n          type: node.nodeType,\r\n          reason: error instanceof Error ? error.message : \"Removal failed\",\r\n        });\r\n      }\r\n    }\r\n\r\n    // Log warnings about skipped nodes\r\n    if (skippedNodes.length > 0) {\r\n      console.warn(`⚠️ Skipped ${skippedNodes.length} nodes:`);\r\n      const typeNames: Record<number, string> = {\r\n        1: \"Element\",\r\n        2: \"Attribute\",\r\n        3: \"Text\",\r\n        4: \"CDATA\",\r\n        7: \"ProcessingInstruction\",\r\n        8: \"Comment\",\r\n        9: \"Document\",\r\n        10: \"DocumentType\",\r\n        11: \"DocumentFragment\",\r\n      };\r\n\r\n      skippedNodes.forEach(({ type, reason }) => {\r\n        const typeName = typeNames[type] || `Unknown (${type})`;\r\n        console.warn(`  - ${typeName}: ${reason}`);\r\n      });\r\n    }\r\n\r\n    return {\r\n      success: removedCount > 0,\r\n      removedCount,\r\n      error:\r\n        removedCount !== nodes.length\r\n          ? `Only removed ${removedCount} of ${nodes.length} matched nodes`\r\n          : undefined,\r\n    };\r\n  } catch (error) {\r\n    const message = error instanceof Error ? error.message : \"Unknown error\";\r\n    console.error(`❌ XPath evaluation failed: ${message}`);\r\n    return {\r\n      success: false,\r\n      removedCount: 0,\r\n      error: `XPath evaluation failed: ${message}`,\r\n    };\r\n  }\r\n}\r\n"]}